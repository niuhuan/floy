// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.28.

#![allow(
    non_camel_case_types,
    unused,
    non_snake_case,
    clippy::needless_return,
    clippy::redundant_closure_call,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::unused_unit,
    clippy::double_parens,
    clippy::let_and_return,
    clippy::too_many_arguments,
    clippy::match_single_binding
)]

// Section: imports

use flutter_rust_bridge::for_generated::byteorder::{NativeEndian, ReadBytesExt, WriteBytesExt};
use flutter_rust_bridge::for_generated::transform_result_dco;
use flutter_rust_bridge::{Handler, IntoIntoDart};

// Section: boilerplate

flutter_rust_bridge::frb_generated_boilerplate!(
    default_stream_sink_codec = SseCodec,
    default_rust_opaque = RustOpaqueMoi,
    default_rust_auto_opaque = RustAutoOpaqueMoi,
);
const FLUTTER_RUST_BRIDGE_CODEGEN_VERSION: &str = "2.0.0-dev.28";

// Section: executor

flutter_rust_bridge::frb_generated_default_handler!();

// Section: wire_funcs

fn wire_bbs_categories_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "bbs_categories",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| async move {
                transform_result_sse(
                    (move || async move { crate::api::bbs::bbs_categories().await })().await,
                )
            }
        },
    )
}
fn wire_bbs_thread_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "bbs_thread",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_tid = <String>::sse_decode(&mut deserializer);
            let api_page = <i64>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse(
                    (move || async move { crate::api::bbs::bbs_thread(api_tid, api_page).await })()
                        .await,
                )
            }
        },
    )
}
fn wire_bbs_threads_list_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "bbs_threads_list",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_fid = <String>::sse_decode(&mut deserializer);
            let api_page = <i64>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse((move || async move {
                         crate::api::bbs::bbs_threads_list(api_fid, api_page).await
                    })().await)
            }
        },
    )
}
fn wire_fuli_categories_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "fuli_categories",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| async move {
                transform_result_sse(
                    (move || async move { crate::api::fuli::fuli_categories().await })().await,
                )
            }
        },
    )
}
fn wire_fuli_post_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "fuli_post",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_post_id = <i64>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse(
                    (move || async move { crate::api::fuli::fuli_post(api_post_id).await })().await,
                )
            }
        },
    )
}
fn wire_fuli_posts_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "fuli_posts",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_page = <i64>::sse_decode(&mut deserializer);
            let api_category_id = <Option<i64>>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse(
                    (move || async move {
                        crate::api::fuli::fuli_posts(api_page, api_category_id).await
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire_desktop_root_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "desktop_root",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            transform_result_sse((move || crate::api::init::desktop_root())())
        },
    )
}
fn wire_init_app_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "init_app",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| {
                transform_result_sse((move || Result::<_, ()>::Ok(crate::api::init::init_app()))())
            }
        },
    )
}
fn wire_init_context_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "init_context",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_root = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse(
                    (move || async move { crate::api::init::init_context(api_root).await })().await,
                )
            }
        },
    )
}
fn wire_login_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "login",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_username = <String>::sse_decode(&mut deserializer);
            let api_password = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse(
                    (move || async move {
                        crate::api::user_center::login(api_username, api_password).await
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire_re_login_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "re_login",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| async move {
                transform_result_sse(
                    (move || async move { crate::api::user_center::re_login().await })().await,
                )
            }
        },
    )
}

// Section: dart2rust

impl SseDecode for flutter_rust_bridge::for_generated::anyhow::Error {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        unreachable!("");
    }
}

impl SseDecode for String {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<u8>>::sse_decode(deserializer);
        return String::from_utf8(inner).unwrap();
    }
}

impl SseDecode for crate::client::fuli::dataobject::Acf {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_img = <Option<String>>::sse_decode(deserializer);
        let mut var_content = <Option<String>>::sse_decode(deserializer);
        return crate::client::fuli::dataobject::Acf {
            img: var_img,
            content: var_content,
        };
    }
}

impl SseDecode for crate::client::community::dataobject::BbsCategory {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_fid = <String>::sse_decode(deserializer);
        let mut var_name = <String>::sse_decode(deserializer);
        let mut var_forumlist =
            <Vec<crate::client::community::dataobject::Forumlist>>::sse_decode(deserializer);
        return crate::client::community::dataobject::BbsCategory {
            fid: var_fid,
            name: var_name,
            forumlist: var_forumlist,
        };
    }
}

impl SseDecode for bool {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u8().unwrap() != 0
    }
}

impl SseDecode for crate::client::fuli::dataobject::Category {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_id = <i64>::sse_decode(deserializer);
        let mut var_count = <i64>::sse_decode(deserializer);
        let mut var_description = <String>::sse_decode(deserializer);
        let mut var_link = <String>::sse_decode(deserializer);
        let mut var_name = <String>::sse_decode(deserializer);
        let mut var_slug = <String>::sse_decode(deserializer);
        let mut var_taxonomy = <String>::sse_decode(deserializer);
        let mut var_parent = <i64>::sse_decode(deserializer);
        return crate::client::fuli::dataobject::Category {
            id: var_id,
            count: var_count,
            description: var_description,
            link: var_link,
            name: var_name,
            slug: var_slug,
            taxonomy: var_taxonomy,
            parent: var_parent,
        };
    }
}

impl SseDecode for crate::client::fuli::dataobject::Content {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_rendered = <String>::sse_decode(deserializer);
        let mut var_protected = <bool>::sse_decode(deserializer);
        return crate::client::fuli::dataobject::Content {
            rendered: var_rendered,
            protected: var_protected,
        };
    }
}

impl SseDecode for crate::client::community::dataobject::Forumlist {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_fid = <String>::sse_decode(deserializer);
        let mut var_name = <String>::sse_decode(deserializer);
        let mut var_description = <String>::sse_decode(deserializer);
        let mut var_threads = <i64>::sse_decode(deserializer);
        let mut var_posts = <i64>::sse_decode(deserializer);
        let mut var_todayposts = <i64>::sse_decode(deserializer);
        let mut var_lastpost =
            <crate::client::community::dataobject::Lastpost>::sse_decode(deserializer);
        return crate::client::community::dataobject::Forumlist {
            fid: var_fid,
            name: var_name,
            description: var_description,
            threads: var_threads,
            posts: var_posts,
            todayposts: var_todayposts,
            lastpost: var_lastpost,
        };
    }
}

impl SseDecode for i64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_i64::<NativeEndian>().unwrap()
    }
}

impl SseDecode for crate::client::community::dataobject::Lastpost {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_author = <String>::sse_decode(deserializer);
        let mut var_dateline = <String>::sse_decode(deserializer);
        let mut var_subject = <String>::sse_decode(deserializer);
        let mut var_tid = <i64>::sse_decode(deserializer);
        return crate::client::community::dataobject::Lastpost {
            author: var_author,
            dateline: var_dateline,
            subject: var_subject,
            tid: var_tid,
        };
    }
}

impl SseDecode for Vec<crate::client::community::dataobject::BbsCategory> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(
                <crate::client::community::dataobject::BbsCategory>::sse_decode(deserializer),
            );
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::client::fuli::dataobject::Category> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::client::fuli::dataobject::Category>::sse_decode(
                deserializer,
            ));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::client::community::dataobject::Forumlist> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::client::community::dataobject::Forumlist>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::client::community::dataobject::Medal> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::client::community::dataobject::Medal>::sse_decode(
                deserializer,
            ));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::client::fuli::dataobject::Post> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::client::fuli::dataobject::Post>::sse_decode(
                deserializer,
            ));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::client::community::dataobject::Postlist> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::client::community::dataobject::Postlist>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<i64> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<i64>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<u8>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::client::community::dataobject::Ratelog> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::client::community::dataobject::Ratelog>::sse_decode(
                deserializer,
            ));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::client::community::dataobject::ThreadInList> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(
                <crate::client::community::dataobject::ThreadInList>::sse_decode(deserializer),
            );
        }
        return ans_;
    }
}

impl SseDecode for crate::client::user_center::dataobject::Login {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_uid = <i64>::sse_decode(deserializer);
        let mut var_email = <String>::sse_decode(deserializer);
        let mut var_hash = <String>::sse_decode(deserializer);
        let mut var_s5R82132Saltkey = <String>::sse_decode(deserializer);
        let mut var_s5R82132Auth = <String>::sse_decode(deserializer);
        return crate::client::user_center::dataobject::Login {
            uid: var_uid,
            email: var_email,
            hash: var_hash,
            s5r8_2132_saltkey: var_s5R82132Saltkey,
            s5r8_2132_auth: var_s5R82132Auth,
        };
    }
}

impl SseDecode for crate::api::user_center::LoginState {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_empty = <bool>::sse_decode(deserializer);
        let mut var_error = <bool>::sse_decode(deserializer);
        let mut var_errorMsg = <String>::sse_decode(deserializer);
        let mut var_success = <bool>::sse_decode(deserializer);
        let mut var_login =
            <crate::client::user_center::dataobject::Login>::sse_decode(deserializer);
        return crate::api::user_center::LoginState {
            empty: var_empty,
            error: var_error,
            error_msg: var_errorMsg,
            success: var_success,
            login: var_login,
        };
    }
}

impl SseDecode for crate::client::community::dataobject::Medal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_medalid = <String>::sse_decode(deserializer);
        let mut var_name = <String>::sse_decode(deserializer);
        let mut var_image = <String>::sse_decode(deserializer);
        let mut var_description = <String>::sse_decode(deserializer);
        return crate::client::community::dataobject::Medal {
            medalid: var_medalid,
            name: var_name,
            image: var_image,
            description: var_description,
        };
    }
}

impl SseDecode for Option<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<String>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<i64> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<i64>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for crate::client::fuli::dataobject::Post {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_id = <i64>::sse_decode(deserializer);
        let mut var_date = <String>::sse_decode(deserializer);
        let mut var_title = <crate::client::fuli::dataobject::Title>::sse_decode(deserializer);
        let mut var_excerpt = <crate::client::fuli::dataobject::Content>::sse_decode(deserializer);
        let mut var_content = <crate::client::fuli::dataobject::Content>::sse_decode(deserializer);
        let mut var_commentStatus = <String>::sse_decode(deserializer);
        let mut var_categories = <Vec<i64>>::sse_decode(deserializer);
        let mut var_tags = <Vec<i64>>::sse_decode(deserializer);
        let mut var_acf = <crate::client::fuli::dataobject::Acf>::sse_decode(deserializer);
        return crate::client::fuli::dataobject::Post {
            id: var_id,
            date: var_date,
            title: var_title,
            excerpt: var_excerpt,
            content: var_content,
            comment_status: var_commentStatus,
            categories: var_categories,
            tags: var_tags,
            acf: var_acf,
        };
    }
}

impl SseDecode for crate::client::community::dataobject::Postlist {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_pid = <String>::sse_decode(deserializer);
        let mut var_isApp = <String>::sse_decode(deserializer);
        let mut var_fid = <String>::sse_decode(deserializer);
        let mut var_tid = <String>::sse_decode(deserializer);
        let mut var_first = <String>::sse_decode(deserializer);
        let mut var_author = <String>::sse_decode(deserializer);
        let mut var_authorid = <String>::sse_decode(deserializer);
        let mut var_avatar = <String>::sse_decode(deserializer);
        let mut var_subject = <String>::sse_decode(deserializer);
        let mut var_dateline = <String>::sse_decode(deserializer);
        let mut var_message = <String>::sse_decode(deserializer);
        let mut var_ratelog =
            <Vec<crate::client::community::dataobject::Ratelog>>::sse_decode(deserializer);
        let mut var_medals =
            <Vec<crate::client::community::dataobject::Medal>>::sse_decode(deserializer);
        return crate::client::community::dataobject::Postlist {
            pid: var_pid,
            is_app: var_isApp,
            fid: var_fid,
            tid: var_tid,
            first: var_first,
            author: var_author,
            authorid: var_authorid,
            avatar: var_avatar,
            subject: var_subject,
            dateline: var_dateline,
            message: var_message,
            ratelog: var_ratelog,
            medals: var_medals,
        };
    }
}

impl SseDecode for crate::client::community::dataobject::Ratelog {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_username = <String>::sse_decode(deserializer);
        let mut var_score = <i64>::sse_decode(deserializer);
        let mut var_reason = <String>::sse_decode(deserializer);
        return crate::client::community::dataobject::Ratelog {
            username: var_username,
            score: var_score,
            reason: var_reason,
        };
    }
}

impl SseDecode for crate::client::community::dataobject::ThreadData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_total = <i64>::sse_decode(deserializer);
        let mut var_perpage = <i64>::sse_decode(deserializer);
        let mut var_page = <i64>::sse_decode(deserializer);
        let mut var_thread =
            <crate::client::community::dataobject::ThreadDetail>::sse_decode(deserializer);
        let mut var_postlist =
            <Vec<crate::client::community::dataobject::Postlist>>::sse_decode(deserializer);
        let mut var_errcode = <i64>::sse_decode(deserializer);
        let mut var_errmsg = <String>::sse_decode(deserializer);
        return crate::client::community::dataobject::ThreadData {
            total: var_total,
            perpage: var_perpage,
            page: var_page,
            thread: var_thread,
            postlist: var_postlist,
            errcode: var_errcode,
            errmsg: var_errmsg,
        };
    }
}

impl SseDecode for crate::client::community::dataobject::ThreadDetail {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_tid = <String>::sse_decode(deserializer);
        let mut var_fid = <String>::sse_decode(deserializer);
        let mut var_author = <String>::sse_decode(deserializer);
        let mut var_authorid = <String>::sse_decode(deserializer);
        let mut var_subject = <String>::sse_decode(deserializer);
        let mut var_views = <i64>::sse_decode(deserializer);
        let mut var_replies = <i64>::sse_decode(deserializer);
        let mut var_attachment = <String>::sse_decode(deserializer);
        let mut var_recommendAdd = <String>::sse_decode(deserializer);
        let mut var_recommendSub = <String>::sse_decode(deserializer);
        let mut var_favtimes = <String>::sse_decode(deserializer);
        let mut var_sharetimes = <String>::sse_decode(deserializer);
        let mut var_relay = <i64>::sse_decode(deserializer);
        return crate::client::community::dataobject::ThreadDetail {
            tid: var_tid,
            fid: var_fid,
            author: var_author,
            authorid: var_authorid,
            subject: var_subject,
            views: var_views,
            replies: var_replies,
            attachment: var_attachment,
            recommend_add: var_recommendAdd,
            recommend_sub: var_recommendSub,
            favtimes: var_favtimes,
            sharetimes: var_sharetimes,
            relay: var_relay,
        };
    }
}

impl SseDecode for crate::client::community::dataobject::ThreadInList {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_tid = <String>::sse_decode(deserializer);
        let mut var_fid = <String>::sse_decode(deserializer);
        let mut var_author = <String>::sse_decode(deserializer);
        let mut var_authorid = <String>::sse_decode(deserializer);
        let mut var_authorGroupid = <String>::sse_decode(deserializer);
        let mut var_authorGrouptitle = <String>::sse_decode(deserializer);
        let mut var_authorMedal =
            <Vec<crate::client::community::dataobject::Medal>>::sse_decode(deserializer);
        let mut var_avatar = <String>::sse_decode(deserializer);
        let mut var_subject = <String>::sse_decode(deserializer);
        let mut var_dateline = <String>::sse_decode(deserializer);
        let mut var_views = <String>::sse_decode(deserializer);
        let mut var_replies = <String>::sse_decode(deserializer);
        let mut var_lastpost = <String>::sse_decode(deserializer);
        let mut var_lastposter = <String>::sse_decode(deserializer);
        let mut var_status = <String>::sse_decode(deserializer);
        let mut var_displayorder = <String>::sse_decode(deserializer);
        return crate::client::community::dataobject::ThreadInList {
            tid: var_tid,
            fid: var_fid,
            author: var_author,
            authorid: var_authorid,
            author_groupid: var_authorGroupid,
            author_grouptitle: var_authorGrouptitle,
            author_medal: var_authorMedal,
            avatar: var_avatar,
            subject: var_subject,
            dateline: var_dateline,
            views: var_views,
            replies: var_replies,
            lastpost: var_lastpost,
            lastposter: var_lastposter,
            status: var_status,
            displayorder: var_displayorder,
        };
    }
}

impl SseDecode for crate::client::community::dataobject::ThreadPage {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_total = <i64>::sse_decode(deserializer);
        let mut var_page = <i64>::sse_decode(deserializer);
        let mut var_threadlist =
            <Vec<crate::client::community::dataobject::ThreadInList>>::sse_decode(deserializer);
        return crate::client::community::dataobject::ThreadPage {
            total: var_total,
            page: var_page,
            threadlist: var_threadlist,
        };
    }
}

impl SseDecode for crate::client::fuli::dataobject::Title {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_rendered = <String>::sse_decode(deserializer);
        return crate::client::fuli::dataobject::Title {
            rendered: var_rendered,
        };
    }
}

impl SseDecode for u8 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u8().unwrap()
    }
}

impl SseDecode for () {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {}
}

impl SseDecode for i32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_i32::<NativeEndian>().unwrap()
    }
}

fn pde_ffi_dispatcher_primary_impl(
    func_id: i32,
    port: flutter_rust_bridge::for_generated::MessagePort,
    ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len: i32,
    data_len: i32,
) {
    // Codec=Pde (Serialization + dispatch), see doc to use other codecs
    match func_id {
        1 => wire_bbs_categories_impl(port, ptr, rust_vec_len, data_len),
        3 => wire_bbs_thread_impl(port, ptr, rust_vec_len, data_len),
        2 => wire_bbs_threads_list_impl(port, ptr, rust_vec_len, data_len),
        4 => wire_fuli_categories_impl(port, ptr, rust_vec_len, data_len),
        6 => wire_fuli_post_impl(port, ptr, rust_vec_len, data_len),
        5 => wire_fuli_posts_impl(port, ptr, rust_vec_len, data_len),
        7 => wire_init_app_impl(port, ptr, rust_vec_len, data_len),
        8 => wire_init_context_impl(port, ptr, rust_vec_len, data_len),
        10 => wire_login_impl(port, ptr, rust_vec_len, data_len),
        11 => wire_re_login_impl(port, ptr, rust_vec_len, data_len),
        _ => unreachable!(),
    }
}

fn pde_ffi_dispatcher_sync_impl(
    func_id: i32,
    ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len: i32,
    data_len: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    // Codec=Pde (Serialization + dispatch), see doc to use other codecs
    match func_id {
        9 => wire_desktop_root_impl(ptr, rust_vec_len, data_len),
        _ => unreachable!(),
    }
}

// Section: rust2dart

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::client::fuli::dataobject::Acf {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.img.into_into_dart().into_dart(),
            self.content.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::client::fuli::dataobject::Acf
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::client::fuli::dataobject::Acf>
    for crate::client::fuli::dataobject::Acf
{
    fn into_into_dart(self) -> crate::client::fuli::dataobject::Acf {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::client::community::dataobject::BbsCategory {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.fid.into_into_dart().into_dart(),
            self.name.into_into_dart().into_dart(),
            self.forumlist.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::client::community::dataobject::BbsCategory
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::client::community::dataobject::BbsCategory>
    for crate::client::community::dataobject::BbsCategory
{
    fn into_into_dart(self) -> crate::client::community::dataobject::BbsCategory {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::client::fuli::dataobject::Category {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.id.into_into_dart().into_dart(),
            self.count.into_into_dart().into_dart(),
            self.description.into_into_dart().into_dart(),
            self.link.into_into_dart().into_dart(),
            self.name.into_into_dart().into_dart(),
            self.slug.into_into_dart().into_dart(),
            self.taxonomy.into_into_dart().into_dart(),
            self.parent.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::client::fuli::dataobject::Category
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::client::fuli::dataobject::Category>
    for crate::client::fuli::dataobject::Category
{
    fn into_into_dart(self) -> crate::client::fuli::dataobject::Category {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::client::fuli::dataobject::Content {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.rendered.into_into_dart().into_dart(),
            self.protected.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::client::fuli::dataobject::Content
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::client::fuli::dataobject::Content>
    for crate::client::fuli::dataobject::Content
{
    fn into_into_dart(self) -> crate::client::fuli::dataobject::Content {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::client::community::dataobject::Forumlist {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.fid.into_into_dart().into_dart(),
            self.name.into_into_dart().into_dart(),
            self.description.into_into_dart().into_dart(),
            self.threads.into_into_dart().into_dart(),
            self.posts.into_into_dart().into_dart(),
            self.todayposts.into_into_dart().into_dart(),
            self.lastpost.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::client::community::dataobject::Forumlist
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::client::community::dataobject::Forumlist>
    for crate::client::community::dataobject::Forumlist
{
    fn into_into_dart(self) -> crate::client::community::dataobject::Forumlist {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::client::community::dataobject::Lastpost {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.author.into_into_dart().into_dart(),
            self.dateline.into_into_dart().into_dart(),
            self.subject.into_into_dart().into_dart(),
            self.tid.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::client::community::dataobject::Lastpost
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::client::community::dataobject::Lastpost>
    for crate::client::community::dataobject::Lastpost
{
    fn into_into_dart(self) -> crate::client::community::dataobject::Lastpost {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::client::user_center::dataobject::Login {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.uid.into_into_dart().into_dart(),
            self.email.into_into_dart().into_dart(),
            self.hash.into_into_dart().into_dart(),
            self.s5r8_2132_saltkey.into_into_dart().into_dart(),
            self.s5r8_2132_auth.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::client::user_center::dataobject::Login
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::client::user_center::dataobject::Login>
    for crate::client::user_center::dataobject::Login
{
    fn into_into_dart(self) -> crate::client::user_center::dataobject::Login {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::user_center::LoginState {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.empty.into_into_dart().into_dart(),
            self.error.into_into_dart().into_dart(),
            self.error_msg.into_into_dart().into_dart(),
            self.success.into_into_dart().into_dart(),
            self.login.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::user_center::LoginState
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::user_center::LoginState>
    for crate::api::user_center::LoginState
{
    fn into_into_dart(self) -> crate::api::user_center::LoginState {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::client::community::dataobject::Medal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.medalid.into_into_dart().into_dart(),
            self.name.into_into_dart().into_dart(),
            self.image.into_into_dart().into_dart(),
            self.description.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::client::community::dataobject::Medal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::client::community::dataobject::Medal>
    for crate::client::community::dataobject::Medal
{
    fn into_into_dart(self) -> crate::client::community::dataobject::Medal {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::client::fuli::dataobject::Post {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.id.into_into_dart().into_dart(),
            self.date.into_into_dart().into_dart(),
            self.title.into_into_dart().into_dart(),
            self.excerpt.into_into_dart().into_dart(),
            self.content.into_into_dart().into_dart(),
            self.comment_status.into_into_dart().into_dart(),
            self.categories.into_into_dart().into_dart(),
            self.tags.into_into_dart().into_dart(),
            self.acf.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::client::fuli::dataobject::Post
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::client::fuli::dataobject::Post>
    for crate::client::fuli::dataobject::Post
{
    fn into_into_dart(self) -> crate::client::fuli::dataobject::Post {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::client::community::dataobject::Postlist {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.pid.into_into_dart().into_dart(),
            self.is_app.into_into_dart().into_dart(),
            self.fid.into_into_dart().into_dart(),
            self.tid.into_into_dart().into_dart(),
            self.first.into_into_dart().into_dart(),
            self.author.into_into_dart().into_dart(),
            self.authorid.into_into_dart().into_dart(),
            self.avatar.into_into_dart().into_dart(),
            self.subject.into_into_dart().into_dart(),
            self.dateline.into_into_dart().into_dart(),
            self.message.into_into_dart().into_dart(),
            self.ratelog.into_into_dart().into_dart(),
            self.medals.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::client::community::dataobject::Postlist
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::client::community::dataobject::Postlist>
    for crate::client::community::dataobject::Postlist
{
    fn into_into_dart(self) -> crate::client::community::dataobject::Postlist {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::client::community::dataobject::Ratelog {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.username.into_into_dart().into_dart(),
            self.score.into_into_dart().into_dart(),
            self.reason.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::client::community::dataobject::Ratelog
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::client::community::dataobject::Ratelog>
    for crate::client::community::dataobject::Ratelog
{
    fn into_into_dart(self) -> crate::client::community::dataobject::Ratelog {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::client::community::dataobject::ThreadData {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.total.into_into_dart().into_dart(),
            self.perpage.into_into_dart().into_dart(),
            self.page.into_into_dart().into_dart(),
            self.thread.into_into_dart().into_dart(),
            self.postlist.into_into_dart().into_dart(),
            self.errcode.into_into_dart().into_dart(),
            self.errmsg.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::client::community::dataobject::ThreadData
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::client::community::dataobject::ThreadData>
    for crate::client::community::dataobject::ThreadData
{
    fn into_into_dart(self) -> crate::client::community::dataobject::ThreadData {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::client::community::dataobject::ThreadDetail {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.tid.into_into_dart().into_dart(),
            self.fid.into_into_dart().into_dart(),
            self.author.into_into_dart().into_dart(),
            self.authorid.into_into_dart().into_dart(),
            self.subject.into_into_dart().into_dart(),
            self.views.into_into_dart().into_dart(),
            self.replies.into_into_dart().into_dart(),
            self.attachment.into_into_dart().into_dart(),
            self.recommend_add.into_into_dart().into_dart(),
            self.recommend_sub.into_into_dart().into_dart(),
            self.favtimes.into_into_dart().into_dart(),
            self.sharetimes.into_into_dart().into_dart(),
            self.relay.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::client::community::dataobject::ThreadDetail
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::client::community::dataobject::ThreadDetail>
    for crate::client::community::dataobject::ThreadDetail
{
    fn into_into_dart(self) -> crate::client::community::dataobject::ThreadDetail {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::client::community::dataobject::ThreadInList {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.tid.into_into_dart().into_dart(),
            self.fid.into_into_dart().into_dart(),
            self.author.into_into_dart().into_dart(),
            self.authorid.into_into_dart().into_dart(),
            self.author_groupid.into_into_dart().into_dart(),
            self.author_grouptitle.into_into_dart().into_dart(),
            self.author_medal.into_into_dart().into_dart(),
            self.avatar.into_into_dart().into_dart(),
            self.subject.into_into_dart().into_dart(),
            self.dateline.into_into_dart().into_dart(),
            self.views.into_into_dart().into_dart(),
            self.replies.into_into_dart().into_dart(),
            self.lastpost.into_into_dart().into_dart(),
            self.lastposter.into_into_dart().into_dart(),
            self.status.into_into_dart().into_dart(),
            self.displayorder.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::client::community::dataobject::ThreadInList
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::client::community::dataobject::ThreadInList>
    for crate::client::community::dataobject::ThreadInList
{
    fn into_into_dart(self) -> crate::client::community::dataobject::ThreadInList {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::client::community::dataobject::ThreadPage {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.total.into_into_dart().into_dart(),
            self.page.into_into_dart().into_dart(),
            self.threadlist.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::client::community::dataobject::ThreadPage
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::client::community::dataobject::ThreadPage>
    for crate::client::community::dataobject::ThreadPage
{
    fn into_into_dart(self) -> crate::client::community::dataobject::ThreadPage {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::client::fuli::dataobject::Title {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.rendered.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::client::fuli::dataobject::Title
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::client::fuli::dataobject::Title>
    for crate::client::fuli::dataobject::Title
{
    fn into_into_dart(self) -> crate::client::fuli::dataobject::Title {
        self
    }
}

impl SseEncode for flutter_rust_bridge::for_generated::anyhow::Error {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(format!("{:?}", self), serializer);
    }
}

impl SseEncode for String {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<u8>>::sse_encode(self.into_bytes(), serializer);
    }
}

impl SseEncode for crate::client::fuli::dataobject::Acf {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Option<String>>::sse_encode(self.img, serializer);
        <Option<String>>::sse_encode(self.content, serializer);
    }
}

impl SseEncode for crate::client::community::dataobject::BbsCategory {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.fid, serializer);
        <String>::sse_encode(self.name, serializer);
        <Vec<crate::client::community::dataobject::Forumlist>>::sse_encode(
            self.forumlist,
            serializer,
        );
    }
}

impl SseEncode for bool {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u8(self as _).unwrap();
    }
}

impl SseEncode for crate::client::fuli::dataobject::Category {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i64>::sse_encode(self.id, serializer);
        <i64>::sse_encode(self.count, serializer);
        <String>::sse_encode(self.description, serializer);
        <String>::sse_encode(self.link, serializer);
        <String>::sse_encode(self.name, serializer);
        <String>::sse_encode(self.slug, serializer);
        <String>::sse_encode(self.taxonomy, serializer);
        <i64>::sse_encode(self.parent, serializer);
    }
}

impl SseEncode for crate::client::fuli::dataobject::Content {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.rendered, serializer);
        <bool>::sse_encode(self.protected, serializer);
    }
}

impl SseEncode for crate::client::community::dataobject::Forumlist {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.fid, serializer);
        <String>::sse_encode(self.name, serializer);
        <String>::sse_encode(self.description, serializer);
        <i64>::sse_encode(self.threads, serializer);
        <i64>::sse_encode(self.posts, serializer);
        <i64>::sse_encode(self.todayposts, serializer);
        <crate::client::community::dataobject::Lastpost>::sse_encode(self.lastpost, serializer);
    }
}

impl SseEncode for i64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_i64::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for crate::client::community::dataobject::Lastpost {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.author, serializer);
        <String>::sse_encode(self.dateline, serializer);
        <String>::sse_encode(self.subject, serializer);
        <i64>::sse_encode(self.tid, serializer);
    }
}

impl SseEncode for Vec<crate::client::community::dataobject::BbsCategory> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::client::community::dataobject::BbsCategory>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::client::fuli::dataobject::Category> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::client::fuli::dataobject::Category>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::client::community::dataobject::Forumlist> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::client::community::dataobject::Forumlist>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::client::community::dataobject::Medal> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::client::community::dataobject::Medal>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::client::fuli::dataobject::Post> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::client::fuli::dataobject::Post>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::client::community::dataobject::Postlist> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::client::community::dataobject::Postlist>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<i64> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <i64>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <u8>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::client::community::dataobject::Ratelog> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::client::community::dataobject::Ratelog>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::client::community::dataobject::ThreadInList> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::client::community::dataobject::ThreadInList>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for crate::client::user_center::dataobject::Login {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i64>::sse_encode(self.uid, serializer);
        <String>::sse_encode(self.email, serializer);
        <String>::sse_encode(self.hash, serializer);
        <String>::sse_encode(self.s5r8_2132_saltkey, serializer);
        <String>::sse_encode(self.s5r8_2132_auth, serializer);
    }
}

impl SseEncode for crate::api::user_center::LoginState {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.empty, serializer);
        <bool>::sse_encode(self.error, serializer);
        <String>::sse_encode(self.error_msg, serializer);
        <bool>::sse_encode(self.success, serializer);
        <crate::client::user_center::dataobject::Login>::sse_encode(self.login, serializer);
    }
}

impl SseEncode for crate::client::community::dataobject::Medal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.medalid, serializer);
        <String>::sse_encode(self.name, serializer);
        <String>::sse_encode(self.image, serializer);
        <String>::sse_encode(self.description, serializer);
    }
}

impl SseEncode for Option<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <String>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<i64> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <i64>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for crate::client::fuli::dataobject::Post {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i64>::sse_encode(self.id, serializer);
        <String>::sse_encode(self.date, serializer);
        <crate::client::fuli::dataobject::Title>::sse_encode(self.title, serializer);
        <crate::client::fuli::dataobject::Content>::sse_encode(self.excerpt, serializer);
        <crate::client::fuli::dataobject::Content>::sse_encode(self.content, serializer);
        <String>::sse_encode(self.comment_status, serializer);
        <Vec<i64>>::sse_encode(self.categories, serializer);
        <Vec<i64>>::sse_encode(self.tags, serializer);
        <crate::client::fuli::dataobject::Acf>::sse_encode(self.acf, serializer);
    }
}

impl SseEncode for crate::client::community::dataobject::Postlist {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.pid, serializer);
        <String>::sse_encode(self.is_app, serializer);
        <String>::sse_encode(self.fid, serializer);
        <String>::sse_encode(self.tid, serializer);
        <String>::sse_encode(self.first, serializer);
        <String>::sse_encode(self.author, serializer);
        <String>::sse_encode(self.authorid, serializer);
        <String>::sse_encode(self.avatar, serializer);
        <String>::sse_encode(self.subject, serializer);
        <String>::sse_encode(self.dateline, serializer);
        <String>::sse_encode(self.message, serializer);
        <Vec<crate::client::community::dataobject::Ratelog>>::sse_encode(self.ratelog, serializer);
        <Vec<crate::client::community::dataobject::Medal>>::sse_encode(self.medals, serializer);
    }
}

impl SseEncode for crate::client::community::dataobject::Ratelog {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.username, serializer);
        <i64>::sse_encode(self.score, serializer);
        <String>::sse_encode(self.reason, serializer);
    }
}

impl SseEncode for crate::client::community::dataobject::ThreadData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i64>::sse_encode(self.total, serializer);
        <i64>::sse_encode(self.perpage, serializer);
        <i64>::sse_encode(self.page, serializer);
        <crate::client::community::dataobject::ThreadDetail>::sse_encode(self.thread, serializer);
        <Vec<crate::client::community::dataobject::Postlist>>::sse_encode(
            self.postlist,
            serializer,
        );
        <i64>::sse_encode(self.errcode, serializer);
        <String>::sse_encode(self.errmsg, serializer);
    }
}

impl SseEncode for crate::client::community::dataobject::ThreadDetail {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.tid, serializer);
        <String>::sse_encode(self.fid, serializer);
        <String>::sse_encode(self.author, serializer);
        <String>::sse_encode(self.authorid, serializer);
        <String>::sse_encode(self.subject, serializer);
        <i64>::sse_encode(self.views, serializer);
        <i64>::sse_encode(self.replies, serializer);
        <String>::sse_encode(self.attachment, serializer);
        <String>::sse_encode(self.recommend_add, serializer);
        <String>::sse_encode(self.recommend_sub, serializer);
        <String>::sse_encode(self.favtimes, serializer);
        <String>::sse_encode(self.sharetimes, serializer);
        <i64>::sse_encode(self.relay, serializer);
    }
}

impl SseEncode for crate::client::community::dataobject::ThreadInList {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.tid, serializer);
        <String>::sse_encode(self.fid, serializer);
        <String>::sse_encode(self.author, serializer);
        <String>::sse_encode(self.authorid, serializer);
        <String>::sse_encode(self.author_groupid, serializer);
        <String>::sse_encode(self.author_grouptitle, serializer);
        <Vec<crate::client::community::dataobject::Medal>>::sse_encode(
            self.author_medal,
            serializer,
        );
        <String>::sse_encode(self.avatar, serializer);
        <String>::sse_encode(self.subject, serializer);
        <String>::sse_encode(self.dateline, serializer);
        <String>::sse_encode(self.views, serializer);
        <String>::sse_encode(self.replies, serializer);
        <String>::sse_encode(self.lastpost, serializer);
        <String>::sse_encode(self.lastposter, serializer);
        <String>::sse_encode(self.status, serializer);
        <String>::sse_encode(self.displayorder, serializer);
    }
}

impl SseEncode for crate::client::community::dataobject::ThreadPage {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i64>::sse_encode(self.total, serializer);
        <i64>::sse_encode(self.page, serializer);
        <Vec<crate::client::community::dataobject::ThreadInList>>::sse_encode(
            self.threadlist,
            serializer,
        );
    }
}

impl SseEncode for crate::client::fuli::dataobject::Title {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.rendered, serializer);
    }
}

impl SseEncode for u8 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u8(self).unwrap();
    }
}

impl SseEncode for () {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {}
}

impl SseEncode for i32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_i32::<NativeEndian>(self).unwrap();
    }
}

#[cfg(not(target_family = "wasm"))]
#[path = "frb_generated.io.rs"]
mod io;
#[cfg(not(target_family = "wasm"))]
pub use io::*;

/// cbindgen:ignore
#[cfg(target_family = "wasm")]
#[path = "frb_generated.web.rs"]
mod web;
#[cfg(target_family = "wasm")]
pub use web::*;
