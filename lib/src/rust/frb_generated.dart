// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.28.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/bbs.dart';
import 'api/fuli.dart';
import 'api/init.dart';
import 'api/user_center.dart';
import 'client/community/dataobject.dart';
import 'client/fuli/dataobject.dart';
import 'client/user_center/dataobject.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.io.dart' if (dart.library.html) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {
    await api.initApp();
  }

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.0.0-dev.28';

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'rust_lib_floy',
    ioDirectory: 'rust/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  Future<List<BbsCategory>> bbsCategories({dynamic hint});

  Future<ThreadData> bbsThread(
      {required String tid, required int page, dynamic hint});

  Future<ThreadPage> bbsThreadsList(
      {required String fid, required int page, dynamic hint});

  Future<List<Category>> fuliCategories({dynamic hint});

  Future<Post> fuliPost({required int postId, dynamic hint});

  Future<List<Post>> fuliPosts(
      {required int page, int? categoryId, dynamic hint});

  String desktopRoot({dynamic hint});

  Future<void> initApp({dynamic hint});

  Future<void> initContext({required String root, dynamic hint});

  Future<LoginState> login(
      {required String username, required String password, dynamic hint});

  Future<LoginState> reLogin({dynamic hint});
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<List<BbsCategory>> bbsCategories({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_bbs_category,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kBbsCategoriesConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kBbsCategoriesConstMeta => const TaskConstMeta(
        debugName: "bbs_categories",
        argNames: [],
      );

  @override
  Future<ThreadData> bbsThread(
      {required String tid, required int page, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(tid, serializer);
        sse_encode_i_64(page, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 3, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_thread_data,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kBbsThreadConstMeta,
      argValues: [tid, page],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kBbsThreadConstMeta => const TaskConstMeta(
        debugName: "bbs_thread",
        argNames: ["tid", "page"],
      );

  @override
  Future<ThreadPage> bbsThreadsList(
      {required String fid, required int page, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(fid, serializer);
        sse_encode_i_64(page, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 2, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_thread_page,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kBbsThreadsListConstMeta,
      argValues: [fid, page],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kBbsThreadsListConstMeta => const TaskConstMeta(
        debugName: "bbs_threads_list",
        argNames: ["fid", "page"],
      );

  @override
  Future<List<Category>> fuliCategories({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 4, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_category,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kFuliCategoriesConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuliCategoriesConstMeta => const TaskConstMeta(
        debugName: "fuli_categories",
        argNames: [],
      );

  @override
  Future<Post> fuliPost({required int postId, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_64(postId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 6, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_post,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kFuliPostConstMeta,
      argValues: [postId],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuliPostConstMeta => const TaskConstMeta(
        debugName: "fuli_post",
        argNames: ["postId"],
      );

  @override
  Future<List<Post>> fuliPosts(
      {required int page, int? categoryId, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_64(page, serializer);
        sse_encode_opt_box_autoadd_i_64(categoryId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 5, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_post,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kFuliPostsConstMeta,
      argValues: [page, categoryId],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuliPostsConstMeta => const TaskConstMeta(
        debugName: "fuli_posts",
        argNames: ["page", "categoryId"],
      );

  @override
  String desktopRoot({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 9)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kDesktopRootConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kDesktopRootConstMeta => const TaskConstMeta(
        debugName: "desktop_root",
        argNames: [],
      );

  @override
  Future<void> initApp({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 7, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kInitAppConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kInitAppConstMeta => const TaskConstMeta(
        debugName: "init_app",
        argNames: [],
      );

  @override
  Future<void> initContext({required String root, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(root, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 8, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kInitContextConstMeta,
      argValues: [root],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kInitContextConstMeta => const TaskConstMeta(
        debugName: "init_context",
        argNames: ["root"],
      );

  @override
  Future<LoginState> login(
      {required String username, required String password, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(username, serializer);
        sse_encode_String(password, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 10, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_login_state,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kLoginConstMeta,
      argValues: [username, password],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kLoginConstMeta => const TaskConstMeta(
        debugName: "login",
        argNames: ["username", "password"],
      );

  @override
  Future<LoginState> reLogin({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 11, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_login_state,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kReLoginConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kReLoginConstMeta => const TaskConstMeta(
        debugName: "re_login",
        argNames: [],
      );

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AnyhowException(raw as String);
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  Acf dco_decode_acf(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return Acf(
      img: dco_decode_opt_String(arr[0]),
      content: dco_decode_opt_String(arr[1]),
    );
  }

  @protected
  BbsCategory dco_decode_bbs_category(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return BbsCategory(
      fid: dco_decode_String(arr[0]),
      name: dco_decode_String(arr[1]),
      forumlist: dco_decode_list_forumlist(arr[2]),
    );
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  int dco_decode_box_autoadd_i_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_i_64(raw);
  }

  @protected
  Category dco_decode_category(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 8)
      throw Exception('unexpected arr length: expect 8 but see ${arr.length}');
    return Category(
      id: dco_decode_i_64(arr[0]),
      count: dco_decode_i_64(arr[1]),
      description: dco_decode_String(arr[2]),
      link: dco_decode_String(arr[3]),
      name: dco_decode_String(arr[4]),
      slug: dco_decode_String(arr[5]),
      taxonomy: dco_decode_String(arr[6]),
      parent: dco_decode_i_64(arr[7]),
    );
  }

  @protected
  Content dco_decode_content(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return Content(
      rendered: dco_decode_String(arr[0]),
      protected: dco_decode_bool(arr[1]),
    );
  }

  @protected
  Forumlist dco_decode_forumlist(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 7)
      throw Exception('unexpected arr length: expect 7 but see ${arr.length}');
    return Forumlist(
      fid: dco_decode_String(arr[0]),
      name: dco_decode_String(arr[1]),
      description: dco_decode_String(arr[2]),
      threads: dco_decode_i_64(arr[3]),
      posts: dco_decode_i_64(arr[4]),
      todayposts: dco_decode_i_64(arr[5]),
      lastpost: dco_decode_lastpost(arr[6]),
    );
  }

  @protected
  int dco_decode_i_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeI64OrU64(raw);
  }

  @protected
  Lastpost dco_decode_lastpost(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return Lastpost(
      author: dco_decode_String(arr[0]),
      dateline: dco_decode_String(arr[1]),
      subject: dco_decode_String(arr[2]),
      tid: dco_decode_i_64(arr[3]),
    );
  }

  @protected
  List<BbsCategory> dco_decode_list_bbs_category(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_bbs_category).toList();
  }

  @protected
  List<Category> dco_decode_list_category(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_category).toList();
  }

  @protected
  List<Forumlist> dco_decode_list_forumlist(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_forumlist).toList();
  }

  @protected
  List<Medal> dco_decode_list_medal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_medal).toList();
  }

  @protected
  List<Post> dco_decode_list_post(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_post).toList();
  }

  @protected
  List<Postlist> dco_decode_list_postlist(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_postlist).toList();
  }

  @protected
  Int64List dco_decode_list_prim_i_64_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Int64List.from(raw);
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  List<Ratelog> dco_decode_list_ratelog(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_ratelog).toList();
  }

  @protected
  List<ThreadInList> dco_decode_list_thread_in_list(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_thread_in_list).toList();
  }

  @protected
  Login dco_decode_login(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 5)
      throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return Login(
      uid: dco_decode_i_64(arr[0]),
      email: dco_decode_String(arr[1]),
      hash: dco_decode_String(arr[2]),
      s5R82132Saltkey: dco_decode_String(arr[3]),
      s5R82132Auth: dco_decode_String(arr[4]),
    );
  }

  @protected
  LoginState dco_decode_login_state(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 5)
      throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return LoginState(
      empty: dco_decode_bool(arr[0]),
      error: dco_decode_bool(arr[1]),
      errorMsg: dco_decode_String(arr[2]),
      success: dco_decode_bool(arr[3]),
      login: dco_decode_login(arr[4]),
    );
  }

  @protected
  Medal dco_decode_medal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return Medal(
      medalid: dco_decode_String(arr[0]),
      name: dco_decode_String(arr[1]),
      image: dco_decode_String(arr[2]),
      description: dco_decode_String(arr[3]),
    );
  }

  @protected
  String? dco_decode_opt_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_String(raw);
  }

  @protected
  int? dco_decode_opt_box_autoadd_i_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_i_64(raw);
  }

  @protected
  Post dco_decode_post(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 9)
      throw Exception('unexpected arr length: expect 9 but see ${arr.length}');
    return Post(
      id: dco_decode_i_64(arr[0]),
      date: dco_decode_String(arr[1]),
      title: dco_decode_title(arr[2]),
      excerpt: dco_decode_content(arr[3]),
      content: dco_decode_content(arr[4]),
      commentStatus: dco_decode_String(arr[5]),
      categories: dco_decode_list_prim_i_64_strict(arr[6]),
      tags: dco_decode_list_prim_i_64_strict(arr[7]),
      acf: dco_decode_acf(arr[8]),
    );
  }

  @protected
  Postlist dco_decode_postlist(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 13)
      throw Exception('unexpected arr length: expect 13 but see ${arr.length}');
    return Postlist(
      pid: dco_decode_String(arr[0]),
      isApp: dco_decode_String(arr[1]),
      fid: dco_decode_String(arr[2]),
      tid: dco_decode_String(arr[3]),
      first: dco_decode_String(arr[4]),
      author: dco_decode_String(arr[5]),
      authorid: dco_decode_String(arr[6]),
      avatar: dco_decode_String(arr[7]),
      subject: dco_decode_String(arr[8]),
      dateline: dco_decode_String(arr[9]),
      message: dco_decode_String(arr[10]),
      ratelog: dco_decode_list_ratelog(arr[11]),
      medals: dco_decode_list_medal(arr[12]),
    );
  }

  @protected
  Ratelog dco_decode_ratelog(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return Ratelog(
      username: dco_decode_String(arr[0]),
      score: dco_decode_i_64(arr[1]),
      reason: dco_decode_String(arr[2]),
    );
  }

  @protected
  ThreadData dco_decode_thread_data(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 7)
      throw Exception('unexpected arr length: expect 7 but see ${arr.length}');
    return ThreadData(
      total: dco_decode_i_64(arr[0]),
      perpage: dco_decode_i_64(arr[1]),
      page: dco_decode_i_64(arr[2]),
      thread: dco_decode_thread_detail(arr[3]),
      postlist: dco_decode_list_postlist(arr[4]),
      errcode: dco_decode_i_64(arr[5]),
      errmsg: dco_decode_String(arr[6]),
    );
  }

  @protected
  ThreadDetail dco_decode_thread_detail(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 13)
      throw Exception('unexpected arr length: expect 13 but see ${arr.length}');
    return ThreadDetail(
      tid: dco_decode_String(arr[0]),
      fid: dco_decode_String(arr[1]),
      author: dco_decode_String(arr[2]),
      authorid: dco_decode_String(arr[3]),
      subject: dco_decode_String(arr[4]),
      views: dco_decode_i_64(arr[5]),
      replies: dco_decode_i_64(arr[6]),
      attachment: dco_decode_String(arr[7]),
      recommendAdd: dco_decode_String(arr[8]),
      recommendSub: dco_decode_String(arr[9]),
      favtimes: dco_decode_String(arr[10]),
      sharetimes: dco_decode_String(arr[11]),
      relay: dco_decode_i_64(arr[12]),
    );
  }

  @protected
  ThreadInList dco_decode_thread_in_list(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 16)
      throw Exception('unexpected arr length: expect 16 but see ${arr.length}');
    return ThreadInList(
      tid: dco_decode_String(arr[0]),
      fid: dco_decode_String(arr[1]),
      author: dco_decode_String(arr[2]),
      authorid: dco_decode_String(arr[3]),
      authorGroupid: dco_decode_String(arr[4]),
      authorGrouptitle: dco_decode_String(arr[5]),
      authorMedal: dco_decode_list_medal(arr[6]),
      avatar: dco_decode_String(arr[7]),
      subject: dco_decode_String(arr[8]),
      dateline: dco_decode_String(arr[9]),
      views: dco_decode_String(arr[10]),
      replies: dco_decode_String(arr[11]),
      lastpost: dco_decode_String(arr[12]),
      lastposter: dco_decode_String(arr[13]),
      status: dco_decode_String(arr[14]),
      displayorder: dco_decode_String(arr[15]),
    );
  }

  @protected
  ThreadPage dco_decode_thread_page(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return ThreadPage(
      total: dco_decode_i_64(arr[0]),
      page: dco_decode_i_64(arr[1]),
      threadlist: dco_decode_list_thread_in_list(arr[2]),
    );
  }

  @protected
  Title dco_decode_title(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return Title(
      rendered: dco_decode_String(arr[0]),
    );
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_String(deserializer);
    return AnyhowException(inner);
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  Acf sse_decode_acf(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_img = sse_decode_opt_String(deserializer);
    var var_content = sse_decode_opt_String(deserializer);
    return Acf(img: var_img, content: var_content);
  }

  @protected
  BbsCategory sse_decode_bbs_category(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_fid = sse_decode_String(deserializer);
    var var_name = sse_decode_String(deserializer);
    var var_forumlist = sse_decode_list_forumlist(deserializer);
    return BbsCategory(fid: var_fid, name: var_name, forumlist: var_forumlist);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  int sse_decode_box_autoadd_i_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_i_64(deserializer));
  }

  @protected
  Category sse_decode_category(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_i_64(deserializer);
    var var_count = sse_decode_i_64(deserializer);
    var var_description = sse_decode_String(deserializer);
    var var_link = sse_decode_String(deserializer);
    var var_name = sse_decode_String(deserializer);
    var var_slug = sse_decode_String(deserializer);
    var var_taxonomy = sse_decode_String(deserializer);
    var var_parent = sse_decode_i_64(deserializer);
    return Category(
        id: var_id,
        count: var_count,
        description: var_description,
        link: var_link,
        name: var_name,
        slug: var_slug,
        taxonomy: var_taxonomy,
        parent: var_parent);
  }

  @protected
  Content sse_decode_content(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_rendered = sse_decode_String(deserializer);
    var var_protected = sse_decode_bool(deserializer);
    return Content(rendered: var_rendered, protected: var_protected);
  }

  @protected
  Forumlist sse_decode_forumlist(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_fid = sse_decode_String(deserializer);
    var var_name = sse_decode_String(deserializer);
    var var_description = sse_decode_String(deserializer);
    var var_threads = sse_decode_i_64(deserializer);
    var var_posts = sse_decode_i_64(deserializer);
    var var_todayposts = sse_decode_i_64(deserializer);
    var var_lastpost = sse_decode_lastpost(deserializer);
    return Forumlist(
        fid: var_fid,
        name: var_name,
        description: var_description,
        threads: var_threads,
        posts: var_posts,
        todayposts: var_todayposts,
        lastpost: var_lastpost);
  }

  @protected
  int sse_decode_i_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt64();
  }

  @protected
  Lastpost sse_decode_lastpost(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_author = sse_decode_String(deserializer);
    var var_dateline = sse_decode_String(deserializer);
    var var_subject = sse_decode_String(deserializer);
    var var_tid = sse_decode_i_64(deserializer);
    return Lastpost(
        author: var_author,
        dateline: var_dateline,
        subject: var_subject,
        tid: var_tid);
  }

  @protected
  List<BbsCategory> sse_decode_list_bbs_category(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <BbsCategory>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_bbs_category(deserializer));
    }
    return ans_;
  }

  @protected
  List<Category> sse_decode_list_category(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Category>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_category(deserializer));
    }
    return ans_;
  }

  @protected
  List<Forumlist> sse_decode_list_forumlist(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Forumlist>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_forumlist(deserializer));
    }
    return ans_;
  }

  @protected
  List<Medal> sse_decode_list_medal(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Medal>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_medal(deserializer));
    }
    return ans_;
  }

  @protected
  List<Post> sse_decode_list_post(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Post>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_post(deserializer));
    }
    return ans_;
  }

  @protected
  List<Postlist> sse_decode_list_postlist(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Postlist>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_postlist(deserializer));
    }
    return ans_;
  }

  @protected
  Int64List sse_decode_list_prim_i_64_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getInt64List(len_);
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  List<Ratelog> sse_decode_list_ratelog(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Ratelog>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_ratelog(deserializer));
    }
    return ans_;
  }

  @protected
  List<ThreadInList> sse_decode_list_thread_in_list(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <ThreadInList>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_thread_in_list(deserializer));
    }
    return ans_;
  }

  @protected
  Login sse_decode_login(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_uid = sse_decode_i_64(deserializer);
    var var_email = sse_decode_String(deserializer);
    var var_hash = sse_decode_String(deserializer);
    var var_s5R82132Saltkey = sse_decode_String(deserializer);
    var var_s5R82132Auth = sse_decode_String(deserializer);
    return Login(
        uid: var_uid,
        email: var_email,
        hash: var_hash,
        s5R82132Saltkey: var_s5R82132Saltkey,
        s5R82132Auth: var_s5R82132Auth);
  }

  @protected
  LoginState sse_decode_login_state(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_empty = sse_decode_bool(deserializer);
    var var_error = sse_decode_bool(deserializer);
    var var_errorMsg = sse_decode_String(deserializer);
    var var_success = sse_decode_bool(deserializer);
    var var_login = sse_decode_login(deserializer);
    return LoginState(
        empty: var_empty,
        error: var_error,
        errorMsg: var_errorMsg,
        success: var_success,
        login: var_login);
  }

  @protected
  Medal sse_decode_medal(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_medalid = sse_decode_String(deserializer);
    var var_name = sse_decode_String(deserializer);
    var var_image = sse_decode_String(deserializer);
    var var_description = sse_decode_String(deserializer);
    return Medal(
        medalid: var_medalid,
        name: var_name,
        image: var_image,
        description: var_description);
  }

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  int? sse_decode_opt_box_autoadd_i_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_i_64(deserializer));
    } else {
      return null;
    }
  }

  @protected
  Post sse_decode_post(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_i_64(deserializer);
    var var_date = sse_decode_String(deserializer);
    var var_title = sse_decode_title(deserializer);
    var var_excerpt = sse_decode_content(deserializer);
    var var_content = sse_decode_content(deserializer);
    var var_commentStatus = sse_decode_String(deserializer);
    var var_categories = sse_decode_list_prim_i_64_strict(deserializer);
    var var_tags = sse_decode_list_prim_i_64_strict(deserializer);
    var var_acf = sse_decode_acf(deserializer);
    return Post(
        id: var_id,
        date: var_date,
        title: var_title,
        excerpt: var_excerpt,
        content: var_content,
        commentStatus: var_commentStatus,
        categories: var_categories,
        tags: var_tags,
        acf: var_acf);
  }

  @protected
  Postlist sse_decode_postlist(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_pid = sse_decode_String(deserializer);
    var var_isApp = sse_decode_String(deserializer);
    var var_fid = sse_decode_String(deserializer);
    var var_tid = sse_decode_String(deserializer);
    var var_first = sse_decode_String(deserializer);
    var var_author = sse_decode_String(deserializer);
    var var_authorid = sse_decode_String(deserializer);
    var var_avatar = sse_decode_String(deserializer);
    var var_subject = sse_decode_String(deserializer);
    var var_dateline = sse_decode_String(deserializer);
    var var_message = sse_decode_String(deserializer);
    var var_ratelog = sse_decode_list_ratelog(deserializer);
    var var_medals = sse_decode_list_medal(deserializer);
    return Postlist(
        pid: var_pid,
        isApp: var_isApp,
        fid: var_fid,
        tid: var_tid,
        first: var_first,
        author: var_author,
        authorid: var_authorid,
        avatar: var_avatar,
        subject: var_subject,
        dateline: var_dateline,
        message: var_message,
        ratelog: var_ratelog,
        medals: var_medals);
  }

  @protected
  Ratelog sse_decode_ratelog(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_username = sse_decode_String(deserializer);
    var var_score = sse_decode_i_64(deserializer);
    var var_reason = sse_decode_String(deserializer);
    return Ratelog(
        username: var_username, score: var_score, reason: var_reason);
  }

  @protected
  ThreadData sse_decode_thread_data(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_total = sse_decode_i_64(deserializer);
    var var_perpage = sse_decode_i_64(deserializer);
    var var_page = sse_decode_i_64(deserializer);
    var var_thread = sse_decode_thread_detail(deserializer);
    var var_postlist = sse_decode_list_postlist(deserializer);
    var var_errcode = sse_decode_i_64(deserializer);
    var var_errmsg = sse_decode_String(deserializer);
    return ThreadData(
        total: var_total,
        perpage: var_perpage,
        page: var_page,
        thread: var_thread,
        postlist: var_postlist,
        errcode: var_errcode,
        errmsg: var_errmsg);
  }

  @protected
  ThreadDetail sse_decode_thread_detail(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_tid = sse_decode_String(deserializer);
    var var_fid = sse_decode_String(deserializer);
    var var_author = sse_decode_String(deserializer);
    var var_authorid = sse_decode_String(deserializer);
    var var_subject = sse_decode_String(deserializer);
    var var_views = sse_decode_i_64(deserializer);
    var var_replies = sse_decode_i_64(deserializer);
    var var_attachment = sse_decode_String(deserializer);
    var var_recommendAdd = sse_decode_String(deserializer);
    var var_recommendSub = sse_decode_String(deserializer);
    var var_favtimes = sse_decode_String(deserializer);
    var var_sharetimes = sse_decode_String(deserializer);
    var var_relay = sse_decode_i_64(deserializer);
    return ThreadDetail(
        tid: var_tid,
        fid: var_fid,
        author: var_author,
        authorid: var_authorid,
        subject: var_subject,
        views: var_views,
        replies: var_replies,
        attachment: var_attachment,
        recommendAdd: var_recommendAdd,
        recommendSub: var_recommendSub,
        favtimes: var_favtimes,
        sharetimes: var_sharetimes,
        relay: var_relay);
  }

  @protected
  ThreadInList sse_decode_thread_in_list(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_tid = sse_decode_String(deserializer);
    var var_fid = sse_decode_String(deserializer);
    var var_author = sse_decode_String(deserializer);
    var var_authorid = sse_decode_String(deserializer);
    var var_authorGroupid = sse_decode_String(deserializer);
    var var_authorGrouptitle = sse_decode_String(deserializer);
    var var_authorMedal = sse_decode_list_medal(deserializer);
    var var_avatar = sse_decode_String(deserializer);
    var var_subject = sse_decode_String(deserializer);
    var var_dateline = sse_decode_String(deserializer);
    var var_views = sse_decode_String(deserializer);
    var var_replies = sse_decode_String(deserializer);
    var var_lastpost = sse_decode_String(deserializer);
    var var_lastposter = sse_decode_String(deserializer);
    var var_status = sse_decode_String(deserializer);
    var var_displayorder = sse_decode_String(deserializer);
    return ThreadInList(
        tid: var_tid,
        fid: var_fid,
        author: var_author,
        authorid: var_authorid,
        authorGroupid: var_authorGroupid,
        authorGrouptitle: var_authorGrouptitle,
        authorMedal: var_authorMedal,
        avatar: var_avatar,
        subject: var_subject,
        dateline: var_dateline,
        views: var_views,
        replies: var_replies,
        lastpost: var_lastpost,
        lastposter: var_lastposter,
        status: var_status,
        displayorder: var_displayorder);
  }

  @protected
  ThreadPage sse_decode_thread_page(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_total = sse_decode_i_64(deserializer);
    var var_page = sse_decode_i_64(deserializer);
    var var_threadlist = sse_decode_list_thread_in_list(deserializer);
    return ThreadPage(
        total: var_total, page: var_page, threadlist: var_threadlist);
  }

  @protected
  Title sse_decode_title(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_rendered = sse_decode_String(deserializer);
    return Title(rendered: var_rendered);
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  void sse_encode_AnyhowException(
      AnyhowException self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ((');
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_acf(Acf self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_String(self.img, serializer);
    sse_encode_opt_String(self.content, serializer);
  }

  @protected
  void sse_encode_bbs_category(BbsCategory self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.fid, serializer);
    sse_encode_String(self.name, serializer);
    sse_encode_list_forumlist(self.forumlist, serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_box_autoadd_i_64(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_64(self, serializer);
  }

  @protected
  void sse_encode_category(Category self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_64(self.id, serializer);
    sse_encode_i_64(self.count, serializer);
    sse_encode_String(self.description, serializer);
    sse_encode_String(self.link, serializer);
    sse_encode_String(self.name, serializer);
    sse_encode_String(self.slug, serializer);
    sse_encode_String(self.taxonomy, serializer);
    sse_encode_i_64(self.parent, serializer);
  }

  @protected
  void sse_encode_content(Content self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.rendered, serializer);
    sse_encode_bool(self.protected, serializer);
  }

  @protected
  void sse_encode_forumlist(Forumlist self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.fid, serializer);
    sse_encode_String(self.name, serializer);
    sse_encode_String(self.description, serializer);
    sse_encode_i_64(self.threads, serializer);
    sse_encode_i_64(self.posts, serializer);
    sse_encode_i_64(self.todayposts, serializer);
    sse_encode_lastpost(self.lastpost, serializer);
  }

  @protected
  void sse_encode_i_64(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt64(self);
  }

  @protected
  void sse_encode_lastpost(Lastpost self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.author, serializer);
    sse_encode_String(self.dateline, serializer);
    sse_encode_String(self.subject, serializer);
    sse_encode_i_64(self.tid, serializer);
  }

  @protected
  void sse_encode_list_bbs_category(
      List<BbsCategory> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_bbs_category(item, serializer);
    }
  }

  @protected
  void sse_encode_list_category(List<Category> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_category(item, serializer);
    }
  }

  @protected
  void sse_encode_list_forumlist(
      List<Forumlist> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_forumlist(item, serializer);
    }
  }

  @protected
  void sse_encode_list_medal(List<Medal> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_medal(item, serializer);
    }
  }

  @protected
  void sse_encode_list_post(List<Post> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_post(item, serializer);
    }
  }

  @protected
  void sse_encode_list_postlist(List<Postlist> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_postlist(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_i_64_strict(
      Int64List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putInt64List(self);
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_list_ratelog(List<Ratelog> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_ratelog(item, serializer);
    }
  }

  @protected
  void sse_encode_list_thread_in_list(
      List<ThreadInList> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_thread_in_list(item, serializer);
    }
  }

  @protected
  void sse_encode_login(Login self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_64(self.uid, serializer);
    sse_encode_String(self.email, serializer);
    sse_encode_String(self.hash, serializer);
    sse_encode_String(self.s5R82132Saltkey, serializer);
    sse_encode_String(self.s5R82132Auth, serializer);
  }

  @protected
  void sse_encode_login_state(LoginState self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_bool(self.empty, serializer);
    sse_encode_bool(self.error, serializer);
    sse_encode_String(self.errorMsg, serializer);
    sse_encode_bool(self.success, serializer);
    sse_encode_login(self.login, serializer);
  }

  @protected
  void sse_encode_medal(Medal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.medalid, serializer);
    sse_encode_String(self.name, serializer);
    sse_encode_String(self.image, serializer);
    sse_encode_String(self.description, serializer);
  }

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_String(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_i_64(int? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_i_64(self, serializer);
    }
  }

  @protected
  void sse_encode_post(Post self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_64(self.id, serializer);
    sse_encode_String(self.date, serializer);
    sse_encode_title(self.title, serializer);
    sse_encode_content(self.excerpt, serializer);
    sse_encode_content(self.content, serializer);
    sse_encode_String(self.commentStatus, serializer);
    sse_encode_list_prim_i_64_strict(self.categories, serializer);
    sse_encode_list_prim_i_64_strict(self.tags, serializer);
    sse_encode_acf(self.acf, serializer);
  }

  @protected
  void sse_encode_postlist(Postlist self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.pid, serializer);
    sse_encode_String(self.isApp, serializer);
    sse_encode_String(self.fid, serializer);
    sse_encode_String(self.tid, serializer);
    sse_encode_String(self.first, serializer);
    sse_encode_String(self.author, serializer);
    sse_encode_String(self.authorid, serializer);
    sse_encode_String(self.avatar, serializer);
    sse_encode_String(self.subject, serializer);
    sse_encode_String(self.dateline, serializer);
    sse_encode_String(self.message, serializer);
    sse_encode_list_ratelog(self.ratelog, serializer);
    sse_encode_list_medal(self.medals, serializer);
  }

  @protected
  void sse_encode_ratelog(Ratelog self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.username, serializer);
    sse_encode_i_64(self.score, serializer);
    sse_encode_String(self.reason, serializer);
  }

  @protected
  void sse_encode_thread_data(ThreadData self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_64(self.total, serializer);
    sse_encode_i_64(self.perpage, serializer);
    sse_encode_i_64(self.page, serializer);
    sse_encode_thread_detail(self.thread, serializer);
    sse_encode_list_postlist(self.postlist, serializer);
    sse_encode_i_64(self.errcode, serializer);
    sse_encode_String(self.errmsg, serializer);
  }

  @protected
  void sse_encode_thread_detail(ThreadDetail self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.tid, serializer);
    sse_encode_String(self.fid, serializer);
    sse_encode_String(self.author, serializer);
    sse_encode_String(self.authorid, serializer);
    sse_encode_String(self.subject, serializer);
    sse_encode_i_64(self.views, serializer);
    sse_encode_i_64(self.replies, serializer);
    sse_encode_String(self.attachment, serializer);
    sse_encode_String(self.recommendAdd, serializer);
    sse_encode_String(self.recommendSub, serializer);
    sse_encode_String(self.favtimes, serializer);
    sse_encode_String(self.sharetimes, serializer);
    sse_encode_i_64(self.relay, serializer);
  }

  @protected
  void sse_encode_thread_in_list(ThreadInList self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.tid, serializer);
    sse_encode_String(self.fid, serializer);
    sse_encode_String(self.author, serializer);
    sse_encode_String(self.authorid, serializer);
    sse_encode_String(self.authorGroupid, serializer);
    sse_encode_String(self.authorGrouptitle, serializer);
    sse_encode_list_medal(self.authorMedal, serializer);
    sse_encode_String(self.avatar, serializer);
    sse_encode_String(self.subject, serializer);
    sse_encode_String(self.dateline, serializer);
    sse_encode_String(self.views, serializer);
    sse_encode_String(self.replies, serializer);
    sse_encode_String(self.lastpost, serializer);
    sse_encode_String(self.lastposter, serializer);
    sse_encode_String(self.status, serializer);
    sse_encode_String(self.displayorder, serializer);
  }

  @protected
  void sse_encode_thread_page(ThreadPage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_64(self.total, serializer);
    sse_encode_i_64(self.page, serializer);
    sse_encode_list_thread_in_list(self.threadlist, serializer);
  }

  @protected
  void sse_encode_title(Title self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.rendered, serializer);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }
}
